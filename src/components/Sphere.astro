---

---

<canvas id="cube"></canvas>
<script>
  import { WebGLRenderer, PerspectiveCamera, Scene, Color } from "three";
  import { EffectComposer, EffectPass, RenderPass } from "postprocessing";
  import { ASCIIEffect } from "./ascii";
  import { createSphere } from "./sphere";

  const canvas = document.getElementById("cube");
  if (!canvas) {
    console.error("Canvas element not found");
    throw new Error("Canvas element not found");
  }

  const renderer = new WebGLRenderer({
    powerPreference: "low-power",
    antialias: false,
    stencil: false,
    depth: false,
    alpha: true,
    canvas,
  });
  renderer.setClearColor(0x000000, 0);
  renderer.setSize(canvas.clientWidth, canvas.clientHeight, false);

  const camera = new PerspectiveCamera(
    75,
    canvas.clientWidth / canvas.clientHeight,
    0.1,
    1000
  );
  camera.position.z = 1.9;
  camera.aspect = 1;

  const scene = new Scene();
  const sphere = createSphere();
  scene.add(sphere);

  const composer = new EffectComposer(renderer);
  composer.addPass(new RenderPass(scene, camera));
  composer.addPass(
    new EffectPass(
      camera,
      new ASCIIEffect({
        cellSize: 7,
        color: "#c0f1ea",
        characters: " +**o!:,.",
        fontSize: 50,
      })
    )
  );

  // let lastTime = 0;
  // requestAnimationFrame(function render(time) {
  //   const timeInSeconds = time * 0.001;
  //   const deltaTime = timeInSeconds - lastTime;
  //   lastTime = timeInSeconds;
  //   sphere.rotation.y += deltaTime * 0.08;
  //   sphere.rotation.x += deltaTime * 0.02;
  //   composer.render();
  //   requestAnimationFrame(render);
  // });
  const baseRotationSpeed = { x: 0.02, y: 0.08 };
  const dragSensitivity = 0.2;
  const momentumDecay = 0.98;

  let lastTime = 0;
  let dragRotationVelocity = { x: 0, y: 0 };
  let isDragging = false;
  let dragStart = { x: 0, y: 0 };
  let lastDragTime = 0;

  canvas.addEventListener("pointerdown", (event) => {
    isDragging = true;
    dragStart.x = event.clientX;
    dragStart.y = event.clientY;
  });

  window.addEventListener("pointermove", (event) => {
    if (isDragging) {
      // Use the drag sensitivity to calculate drag rotation velocity
      dragRotationVelocity.x = (event.clientY - dragStart.y) * dragSensitivity;
      dragRotationVelocity.y = (event.clientX - dragStart.x) * dragSensitivity;
      dragStart.x = event.clientX;
      dragStart.y = event.clientY;
    }
  });

  window.addEventListener("pointerup", () => {
    isDragging = false;
  });

  requestAnimationFrame(function render(time) {
    const timeInSeconds = time * 0.001;
    const deltaTime = timeInSeconds - lastTime;
    lastTime = timeInSeconds;

    if (!isDragging) {
      // Apply momentum decay to drag rotation velocity when not dragging
      dragRotationVelocity.x *= momentumDecay;
      dragRotationVelocity.y *= momentumDecay;
    }

    // Apply the drag rotation velocity on top of the base rotation speed
    // Only apply base rotation when not dragging to prevent doubling the effect
    sphere.rotation.y += isDragging
      ? dragRotationVelocity.y * deltaTime
      : (baseRotationSpeed.y + dragRotationVelocity.y) * deltaTime;
    sphere.rotation.x += isDragging
      ? dragRotationVelocity.x * deltaTime
      : (baseRotationSpeed.x + dragRotationVelocity.x) * deltaTime;

    composer.render();
    requestAnimationFrame(render);
  });
</script>

<style>
  canvas {
    width: 35rem;
    max-width: 30vmax;
    aspect-ratio: 1 / 1;
  }
</style>
